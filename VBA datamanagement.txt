FROM FILE: data_and_graphs.xlsm
AUTHOR: Reetta Ylostalo
CREATED IN: 2021
DESCRIPTION:
This is a sample from a VBA module containing subprograms that extract data from an access file and duplicates, trims and modifies it in excel. The order the scripts are run is presented in VBA main.txt .
'***** separates the statements and subprograms in this file

LIST OF SUBS AND FUNCTIONS IN THIS FILE:
Private Sub fetchSamplesRecords()
Private Sub joinTables()
Private Sub calculatedCVals(sht As Worksheet)
Function exceedsLimit(analyte As String, z As Double, c As Double, limit() As String, sections() As Variant) As Boolean
Sub colorBeyondActionLimits(sht As Worksheet)



***** THE SAMPLE STARTS HERE *****



Private Sub fetchSamplesRecords()
'brings records from D:\users\Public\Documents\samples.accdb (or.mdb) to this workbook, on sheets "samples1" and "samples2". Asks the user which sampling points or what time range should be included.
'copies all fields to excel in case so that all parameters can be found if needed
'data is in two access tables, because columns are too many to fit into one table

    Dim dbfullname As String
    Dim cnnstring As String, sourceqry As String, sourceqry2 As String
    Dim cn As ADODB.Connection
    Dim rs As ADODB.recordset
    Dim col As Integer 'field number in access table
    Dim i As Integer
    Dim firstdate As String, lastdate As String
    Dim strsamplecodes As String
    Dim arrsamplecodes() As String 'sample codes comma separated
    Dim whereclause As String
    Dim strFirstdate As String, strLastdate As String
    Dim dirfile As String
    
    If Not (sheetexists("samples1") And sheetexists("samples2")) Then
        MsgBox ("Data can not be imported, because the worksheet(s) it should be appended to are missing. Include sheets samples1 and samples2 in this workbook.")
        End
    End If
    
    dirfile = "D:\users\Public\Documents\samples.accdb"
    If Len(Dir(dirfile)) = 0 Then
        dirfile = "D:\users\Public\Documents\samples.mdb"
        If Len(Dir(dirfile)) = 0 Then
            MsgBox "'samples' access database can not be found. Save it in D:\users\Public\Documents."
            End
        End If
    End If

    strsamplecodes = InputBox("Give sample codes separated by commas (no whitespace!). If you want to choose all samples between certain dates, leave the field empty.")
    If StrPtr(strsamplecodes) = 0 Then 'cancel
        End
    Else
        arrsamplecodes = Split(strsamplecodes, ",")
    End If
        
    If Len(Join(arrsamplecodes)) < 1 Then 'samplecodes left empty
        firstdate = InputBox("Type the earliest date of your date range, for example 1.1.2020:", "Date Confirmation")
        If StrPtr(firstdate) = 0 Then 'cancel
            End
        End If

        lastdate = InputBox("Type the last date of the date range, for example 31.12.2020:")
        If StrPtr(lastdate) = 0 Then 'cancel
            End
        End If

        If firstdate = vbNullString Then
            firstdate = Format("1.1.1900", "mm/dd/yyyy") 'arbitrary date, but surely includes every sample
        Else
            firstdate = Format(firstdate, "mm/dd/yyyy")
        End If
        
        If lastdate = vbNullString Then
            lastdate = Format("31.12.2100", "mm/dd/yyyy")
        Else
            lastdate = Format(lastdate, "mm/dd/yyyy")
        End If
        
        strFirstdate = Replace(firstdate, ".", "/")
        strLastdate = Replace(lastdate, ".", "/")
        whereclause = "(start_date between #" & strFirstdate & "# and #" & strLastdate & "# ) "

    Else
        whereclause = "(samplingpoint = """ & arrsamplecodes(0) & """"
        For i = 1 To UBound(arrsamplecodes)
            whereclause = whereclause & " OR Area = """ & arrsamplecodes(i) & """"
        Next
        whereclause = whereclause & ") "
    End If
    
    ThisWorkbook.Worksheets("samples1").Cells.Clear
    ThisWorkbook.Worksheets("samples2").Cells.Clear
    

    dbfullname = dirfile
    Set cn = New ADODB.Connection
    cnnstring = "Provider=Microsoft.ACE.OLEDB.12.0;" & "Data Source=" & dbfullname & ";"
    cn.Open (cnnstring)

    Set rs = New ADODB.recordset
    sourceqry = "SELECT * FROM samplestable1 WHERE (" & whereclause & _
    "AND (Area Like ""foo%"" OR Area Like ""foo2%"")" & _
    "AND NOT (point_type = ""foo3""))"
    rs.Open sourceqry, cn
   
    ' Write field names
    For col = 0 To rs.Fields.Count - 1
        ThisWorkbook.Worksheets("samples1").Range("A1").Offset(0, col).Value = rs.Fields(col).Name
    Next
     
    ' Write the rs
    ThisWorkbook.Worksheets("samples1").Range("A1").Offset(1, 0).CopyFromRecordset rs

    rs.Close
    
    '...and do again with the second sheet
    Set rs = New ADODB.recordset
    sourceqry2 = "SELECT * FROM samplestable2 WHERE sample_id IN (" & _
    "SELECT a.sample_id FROM samplestable as a WHERE (" & whereclause & _
    "AND (Area Like ""foo%"" OR Area Like ""foo2%"")" & _
    "AND NOT (a.Area = ""foo3"")))"
    rs.Open sourceqry2, cn

    For col = 0 To rs.Fields.Count - 1
        ThisWorkbook.Worksheets("samples2").Range("A1").Offset(0, col).Value = rs.Fields(col).Name
    Next
     
    ThisWorkbook.Worksheets("samples2").Range("A1").Offset(1, 0).CopyFromRecordset rs
        
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing
    
End Sub



*****



Private Sub JoinTables()
' joins the data imported by fetchSamplesRecords() to two sheets onto one sheet "results"

    Dim cn As ADODB.Connection
    Set cn = New ADODB.Connection
    Dim cnnstring As String, strSQL As String
    Dim rs As ADODB.recordset
    Dim col As Integer, row As Integer
    Dim rng As Range
    Dim datasht As Worksheet: Set datasht = ThisWorkbook.Worksheets("results")
    
'if not properly cleared, the remaining formats or data may cause data to be copied under wrong fields VERY randomly

    datasht.Cells.Clear
    
    cnnstring = "Provider=Microsoft.ACE.OLEDB.12.0;" & "Data Source=" & ThisWorkbook.FullName _
     & ";Extended Properties=""Excel 12.0 Macro;HDR=1"" "

    strSQL = "SELECT * FROM [" & ThisWorkbook.FullName & "].[samples1$] as a LEFT JOIN [" & ThisWorkbook.FullName & "].[samples2$] as b" & _
    " ON a.[Sample_id] = b.[Sample_id]"

    cn.Open (cnnstring)
    
    Set rs = New ADODB.recordset
    rs.Open strSQL, cn
    
    For col = 0 To rs.Fields.Count - 1
        datasht.Range("A1").Offset(0, col).Value = rs.Fields(col).Name
    Next

    'for some incomprehensible reason random numeric fields are sometimes copied here numeric but inserted as text. Probably excel bugs
    datasht.Range("A1").Offset(1, 0).CopyFromRecordset rs
    
    rs.Close
    cn.Close
    
    
    'the query adds table aliases to duplicate field names (here: a and b), and this removes them
    datasht.Rows(1).Replace "a.", ""
    col = findword("b.", datasht.Rows(1))
    Do Until col = -1
        datasht.columns(col).EntireColumn.Delete
        col = findword("b.", datasht.Rows(1))
    Loop

 End Sub



*****



Sub calculatedCVals(sht As Worksheet)
'adds 2 columns to 'sht', and calculates C (mg/l) from total alkalinity, and bicarbonate (mg/l) from DIC
'the calculated information is needed in PHREEQC solution calculations
    
    Dim lastcol As Integer
    Dim alkCol As Integer 'total alkalinity
    Dim DICcol As Integer
    Dim Clcol As Integer
    Dim i As Integer
    lastcol = sht.UsedRange.columns.Count
    alkCol = findWordExact("Total alkalinity, HCl uptake", sht.Rows(1)) '
    DICcol = findWordExact("Dissolved inorg carbon", sht.Rows(1))
    
    sht.Cells(1, (lastcol + 1)).Value = "C from total alkalinity (mg/L)"
    sht.Cells(1, (lastcol + 2)).Value = "HCO3 from DIC (mg/L)"
    
    For i = 2 To sht.UsedRange.Rows.Count
        sht.Cells(i, lastcol + 1).Value = 12.01 * sht.Cells(i, alkCol).Value
        If sht.Cells(i, DICcol).Value > 0 Then
            sht.Cells(i, (lastcol + 2)).Value = ((12.01 + 16 * 3 + 1.008) / 12.01) * sht.Cells(i, DICcol).Value
        End If
    Next
    
End Sub



*****



Function exceedsLimit(analyte As String, z As Double, c As Double, limit() As String, sections() As Variant) As Boolean
'returns true if 'c' exceeds limit in 'limit(i)' for corresponding 'sections(i)' 
'limit() contains action limits for 'analyte'
'sections() array contains the lower bound of the sections where limits apply.

Dim i As Integer
Dim sectionindex As Integer

For i = 0 To UBound(sections) 'sections for example = Array(-1,-2), if section bounds are 0 - -1 and -1 - -2 celcius
    If sections(i) < z Then
        sectionindex = i
        Exit For
    End If
Next i

If Len(limit((sectionindex + 1) * 2)) > 0 Then
    If CDbl(limit((sectionindex + 1) * 2)) < c Then 'upper bound < concentration
        exceedsLimit = True
        'Debug.Print (sectionindex)
    End If
End If
If Len(limit((sectionindex + 1) * 2 - 1)) > 0 Then
    If CDbl(limit((sectionindex + 1) * 2 - 1)) > c Then 'lower bound > concentration
        exceedsLimit = True
    End If

End If

End Function



*****



Sub colorBeyondActionLimits(sht As Worksheet)
'makes the cells in 'sht' red if they contain results outside action limits

    Dim limits() As Variant: limits = actionLimits '= a static function that puts limits to an array
    Dim limit() As String
    Dim sections() As Variant: sections = Array(-1,-2)
    Dim rng As Range: Set rng = sht.Rows(1)
    Dim i As Integer, j As Integer, totalrows As Integer
    Dim section_upper As Double
    Dim SecUpCol As Integer
    Dim c As Double 'concentration
    Dim cCol As Integer 'concentration column
    Dim compound As String
    
    i = 2
    zCol = findword("section_up", rng)
    totalrows = sht.UsedRange.Rows.Count
    
    Do While i <= totalrows

        section_upper = sht.Cells(i, SecUpCol).Value
        
        If section_upper < 0 Then '
        
            For j = 0 To UBound(limits, 1)
                compound = limits(j)(0) 'corresponding compound in limits(). (i,0) holds compound names
                limit = limits(j) 'compound name + all action limits
                
                'column name is not found or so forth
                On Error GoTo errNextFor:
                cCol = findword(limit(0), rng)
                c = sht.Cells(i, cCol).Value
                If c > 0 Then
                    If exceedsLimit(compound, section_upper, c, limit, sections) = True Then
                        sht.Cells(i, cCol).Interior.ColorIndex = 46 'orangish red like RGB(255,40,0)
                    End If
                End If
NextFor:
            Next
        End If
        
        i = i + 1
    Loop
    
    Exit Sub
    
errNextFor:

    Resume NextFor 'when for example concentration missing or errnextfor thrown
    
End Sub
